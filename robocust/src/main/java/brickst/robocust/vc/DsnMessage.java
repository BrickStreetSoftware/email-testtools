/*
 * @(#)DsnMessage.java
 *
 * Copyright (c) 2001 by Kana Software, Inc. All Rights Reserved.
 */
package brickst.robocust.vc;

import brickst.robocust.lib.*;
import brickst.robocust.smtp.*;
import java.io.*;

/**
 * This is a bounce message in DSN format. (See RFC1894.)
 * 
 * @author  CJ Lofstedt 8/1/01
 */
public class DsnMessage implements SmtpSendable
{
	private static final String reportingMTA = "reporting.mta.vc";
	private static final String receivedFromMTA = "received.from.mta.vc";
	private static final String remoteMTA = "remote.mta.vc";

    private SmtpMessage bouncedMessage;
    private String bouncedAddress;

    /** Contains envelop sender(only one sender) information. */
    private String sender;
    private String[] recipients = new String[1];
    	
    /**
    * Constructor
    */
    public DsnMessage(String sender, SmtpMessage bouncedMessage)
    {
		this.sender = sender;
		this.bouncedMessage = bouncedMessage;
		recipients[0] = bouncedMessage.getEnvelopeSender();
		bouncedAddress = bouncedMessage.getEnvelopeRecipients()[0];
    }
    	
    /**
    * Return envelope recipients. Implementation of SmtpSendable's method. <br>
    * The recipient email addresses are used for the SMTP "RCPT TO:" command 
    * (RFC 821) and must be in canonical format. 
    *
    * @return String[]  a String array of email address. Null if
    * we never set this value.
    */
    public String[] getEnvelopeRecipients()
    {
    	return recipients;
    }
    	
    /**
    * Return envelope sender. Implementation of interface SmtpSendable method. <br>
    * The sender email address is used for the SMTP "MAIL FROM:" command 
    * (RFC 821) and must be in canonical format, i.e. cj@kana.com.
    *
    * @return String  Email address of sender. Null if we never set this 
    * value.
    */
    public String getEnvelopeSender()
    {
    	return sender;
    }
    	
    /**
    * Writes the complete message to the OutputStream out.
    *
    * @param out the OutputStream to write the message to
    * @exception java.io.IOException
    */
    public void writeTo(OutputStream out) 
        throws java.io.IOException
    {
		AsciiString content = new AsciiString(2048);

		String milliSecondString = Long.toString(System.currentTimeMillis());
		String date = CRMTime.getCurrentRfc822Date();

		String boundary = milliSecondString + ".MimeBoundarY";

		// We will construct a unique message id using the current time in millisec
		// and the from address
		content.append("Message-ID: <").append(milliSecondString).append('.').
								append(sender).append('>').appendCRLF();

		content.append("Date: ").append(date).appendCRLF();
		content.append("From: ").append(sender).appendCRLF();
		content.append("Subject: Delivery report").appendCRLF();
		content.append("To: ").append(recipients[0]).appendCRLF();
		content.append("Mime-Version: 1.0").appendCRLF();
		content.append("Content-Type: multipart/report; report-type=delivery-status;").appendCRLF();
		content.append("    boundary=\"").append(boundary).append("\"").appendCRLF();
//		content.appendCRLF();

		// Human readable part - nonsense text such as that generated by PowerMTA
		content.appendCRLF().append("--").append(boundary).appendCRLF();
		content.appendCRLF();
		content.append("Here is a long wordy notice from the mail server on ").append(reportingMTA).append('.').appendCRLF();
		content.append("This message is to inform you that things didn't go well. We couldn't deliver").appendCRLF();
		content.append("the message as you requested. The recipient didn't want it. The next part of").appendCRLF();
		content.append("this message, the standard Delivery Status Notification (DSN) report will").appendCRLF();
		content.append("explain things. Hope you will be happy with this explanation. If not, well,").appendCRLF();
		content.append("that is not our problem.").appendCRLF();
		content.appendCRLF();
		content.append("The message for <").append(bouncedAddress).append("> failed.").appendCRLF();

		// Delivery status part
		content.appendCRLF().append("--").append(boundary).appendCRLF();
		content.append("Content-Type: message/delivery-status").appendCRLF();
		content.appendCRLF();
		content.append("Reporting-MTA: dns;").append(reportingMTA).appendCRLF();
		content.append("Received-From-MTA: smtp;").append(receivedFromMTA).appendCRLF();
		content.append("Arrival-Date: ").append(date).appendCRLF();
		content.appendCRLF();
		content.append("Final-Recipient: rfc822;").append(bouncedAddress).appendCRLF();
		content.append("Action: failed").appendCRLF();
		content.append("Status: 5.0.0").appendCRLF();
		content.append("Remote-MTA: dns;").append(remoteMTA).appendCRLF();
		content.append("Diagnostic-Code: smtp;550 <").append(bouncedAddress).append(">... User unknown");
		content.appendCRLF();

		// Original message
		content.appendCRLF().append("--").append(boundary).appendCRLF();
		content.append("Content-Type: text/rfc822-headers").appendCRLF();
		content.appendCRLF();

		// Write what we have so far
        content.writeTo(out);

		// The actual original message
		byte[] message = bouncedMessage.getData();
		out.write(message, 0, headerLength(message));

		// End boundary
		content.clear();
		content.appendCRLF().append("--").append(boundary).append("--").appendCRLF();

		// Write the message
        content.writeTo(out);
    }

	// Find the end of the header section by looking for CRLF CRLF
	private int headerLength(byte[] message)
	{
		int len = message.length;

		for (int i=0; i<len; i++)
		{
			if (message[i] == 13) //CR
				if (i+3<len)
					if (message[i+1] == 10 //LF
						&& message[i+2] == 13 //CR
						&& message[i+3] == 10) //LF
						return i+2; // Include the first CRLF
		}
		return len;
	}

    public String toString()
    {
		try
		{
			ByteArrayOutputStream ba = new ByteArrayOutputStream();
			writeTo(ba);
			return ba.toString();
		}
		catch (IOException e)
		{
			return e.toString();
		}
    }
/*
    public static void main (String[] args) throws IOException
	{
		SmtpMessage original = new SmtpMessage();
		String[] recipients = new String[1];
		recipients[0] = "badAddress@domain.vc";

		AsciiString data = new AsciiString();
		data.append("To: me\r\n");
		data.append("Subject: test\r\n");
		data.append("\r\n");
		data.append("Body");

		original.setEnvelopeRecipients(recipients);
		original.setEnvelopeSender("originalSender@domain.vc");
		original.setData(data.getBytes());
		

		System.out.println(original.toString());

		DsnMessage dsn = new DsnMessage("postmaster@here.vc", original);
		System.out.println(dsn.toString());
	}
*/
}
